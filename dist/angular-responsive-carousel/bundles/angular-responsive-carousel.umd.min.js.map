{"version":3,"sources":["../../../projects/angular-responsive-carousel/src/lib/angular-responsive-carousel.service.ts","../../../projects/angular-responsive-carousel/src/lib/angular-responsive-carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/touches.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/carousel.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/container.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/cells.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/slide.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/utils.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel/carousel.module.ts","../../../projects/angular-responsive-carousel/src/lib/angular-responsive-carousel.module.ts"],"names":["Injectable","args","providedIn","AngularResponsiveCarouselComponent","prototype","ngOnInit","Component","selector","template","Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","wheel","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","detectLinearSwipe","swipeType","handleLinearSwipe","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","touchListeners","mouseListeners","otherListeners","destroy","action","listeners","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","Carousel","utils","cells","container","slide","isContentImages","isLazyLoad","isContainerLocked","alignCells","initialContainerPosition","containerPullLimit","handleHorizontalSwipe","freeScroll","isNextArrowDisabled","isPrevArrowDisabled","init","cellLength","images","numberOfVisibleCells","overflowCellsLimit","isLightDOM","cellLimit","lightDOM","loop","margin","minSwipeDistance","transitionDuration","transitionTimingFunction","cellWidth","floor","counter","cellLengthInLightDOMMode","updateProperties","cellsElement","visibleWidth","parentElement","clientWidth","clearInterval","autoplayId","lineUpCells","lineUp","handleTransitionend","getImage","next","prev","autoplay","setInterval","autoplayInterval","stopAutoplay","Container","carouselProperties","newPositionIndex","initialPositionX","initialElementPositionX","isLocked","pullLimit","tooFewCells","setWidth","getStartX","startTime","getInitialElementPositionX","disabled","isSwipeInProgress","moveX","getMoveX","move","simpleProcessing","finishMoving","clearInitialValues","positionX","getMovePositionX","isPulled","detectPulled","direction","getDirection","edge","slowdownOnPull","transformPositionX","overflowX","distance","getDistance","currentPositionX","getCurrentPositionX","getEndPosition","_positionX","endPosition","decelerationRatio","rubberPositionX","containerWidth","getWidth","newPositionX","getInertia","getAlignedPositionOnPull","setInitialPosition","inertia","parentPosition","imageUtils","getImages","fullCellWidth","width","value","duration","style","transition","transform","totalImageWidth","position","carouselElementPosition","getCarouselElementPosition","sign","ImageUtils","cellStack","filter","comparePositions","a","b","cell","img","Cells","children","getCellPositionInContainer","push","ifSequenceOfCellsIsChanged","cellIndexInDOMTree","getCellIndexInContainer","positionIndex","cellIndex","imageIndex","getImageIndex","file","type","image","setCounter","Slide","_counter","visibleCellsOverflowContainer","setVisibleWidth","hostElement","isNotClickOnArrow","isSlideLengthLimited","isSlideInProgress","distanceAbs","handleSlide","alignContainerFast","detectClickOnArrow","target","classList","contains","customSlideLength","slideLength","limitSlideLength","getSlideLength","getPreliminaryCounter","isSlidesEnd","getPositionByIndex","select","newCounter","getPositionCorrection","correction","isLastSlide","cellsWidth","getDistanceAbs","imageLength","isLightDOMMode","ifLeftDOMModeAtEnd","getPositionWithoutCorrection","provideSafePosition","remainder","fixedContainerPosition","ifLeftDOMModeToBeginning","containerPositionX","flag","remainderOfCells","Utils","isImagesLessCellLimit","ceil","carouselElementPositionX","CarouselComponent","elementRef","ref","minTimeout","_cellWidth","_loop","_lightDOM","events","EventEmitter","height","pauseOnHover","dots","objectFit","counterSeparator","cellsToScroll","arrows","arrowsTheme","hostClassCarousel","carousel","isMoving","preventDefault","handleTap","nodes","Array","slice","call","cellElement","srcElement","closest","indexOf","slideCounter","lapCounter","innerWidth","innerHeight","ua","navigator","userAgent","toLowerCase","nativeElement","querySelector","_isCounter","_images","onWindowResize","savedCarouselWidth","onMousemove","onMouseleave","isNgContent","setDimensions","ngAfterViewInit","initCarousel","getCellLength","dotsArr","fill","detectChanges","carouselWidth","detectDomChanges","ngOnChanges","changes","ngOnDestroy","id","getCellWidth","videoProperties","eventHandler","landscapeMode","isLandscape","MutationObserver","mutations","onDomChanges","observe","attributes","childList","characterData","hostStyleHeight","hostStyleWidth","handleTransitionendCellContainer","toggleVideo","video","noPlay","paused","play","isVideoPlaying","pause","elementWidth","cellsToShow","ElementRef","ChangeDetectorRef","Output","Input","HostBinding","HostListener","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents","IvyCarouselModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AngularResponsiveCarouselService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-angular-responsive-carousel',\n  template: `\n    <p>\n      angular-responsive-carousel works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class AngularResponsiveCarouselComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string, handler: string) {\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string, handler: string) {\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", event);\r\n            } else {\r\n                this.runHandler(\"longtap\", event);\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","import {Properties} from './interfaces';\r\n\r\nexport class Carousel {\r\n    cellsElement: HTMLElement;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    isContentImages: boolean = true;\r\n    visibleWidth: number;\r\n    isLazyLoad: boolean = true;\r\n    isContainerLocked: boolean = true;\r\n    alignCells: \"left\" | \"center\" = \"left\";\r\n    initialContainerPosition: number = 0;\r\n    autoplayId: any;\r\n    startTime;\r\n    containerPullLimit = 100;\r\n\r\n    get cellLength() {\r\n        return this.cells.cellLength;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get lastCellIndex() {\r\n        return this.images.length ? (this.images.length - 1) : (this.cells.cellLength - 1);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.isLightDOM) {\r\n            let cellLimit = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLimit < this.numberOfVisibleCells) {\r\n                cellLimit = this.numberOfVisibleCells;\r\n            }\r\n\r\n            return cellLimit;\r\n        } else {\r\n            return this.properties.images.length;\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.properties.lightDOM || this.properties.loop;\r\n    }\r\n\r\n    get images() {\r\n        return this.properties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.properties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.properties.minSwipeDistance;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.properties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.properties.transitionTimingFunction;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.properties.cellWidth + this.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get lapCounter() {\r\n        return Math.floor(this.slide.counter / this.cellLengthInLightDOMMode);\r\n    }\r\n\r\n    get slideCounter() {\r\n        return this.slide.counter;\r\n    }\r\n\r\n    constructor(\r\n        private properties: Properties,\r\n        private utils,\r\n        private cells,\r\n        private container,\r\n        private slide) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(properties: Properties) {\r\n        this.properties = properties;\r\n    }\r\n\r\n    init() {\r\n        this.cellsElement = this.properties.cellsElement;\r\n        this.visibleWidth = this.properties.visibleWidth || this.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    destroy() {\r\n        clearInterval(this.autoplayId);\r\n    }\r\n\r\n    lineUpCells() {\r\n        this.cells.lineUp();\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.container.handleTouchstart();\r\n        this.slide.handleTouchstart(event);\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        this.container.handleHorizontalSwipe();\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        if (this.properties.freeScroll) {\r\n            this.container.handleTouchend();\r\n        } else {\r\n            this.container.handleTouchend(true);\r\n            this.slide.handleTouchend(event);\r\n        }\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.slide.handleTransitionend();\r\n    }\r\n\r\n    getImage(index) {\r\n        return this.cells.getImage(index);\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        if (!this.isNextArrowDisabled()) {\r\n            this.slide.next(length);\r\n        }\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.slide.prev(length);\r\n    }\r\n\r\n    isNextArrowDisabled = () => {\r\n        return this.slide.isNextArrowDisabled();\r\n    }\r\n\r\n    isPrevArrowDisabled = () => {\r\n        return this.slide.isPrevArrowDisabled();\r\n    }\r\n\r\n    autoplay() {\r\n        this.autoplayId = setInterval(() => {\r\n            this.next();\r\n        }, this.properties.autoplayInterval);\r\n    }\r\n\r\n    stopAutoplay() {\r\n        if (this.autoplayId) {\r\n            clearInterval(this.autoplayId);\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Container {\r\n    /* The index of the new position relative to \r\n     * the active index, for example -1 or +1 \r\n     */\r\n    newPositionIndex: number = 0;\r\n    isPositionCorrection: boolean;\r\n    initialPositionX: number = 0;\r\n    initialElementPositionX: number = 0;\r\n    isLocked: boolean = true;\r\n    pullLimit = 100;\r\n    startTime;\r\n    startX: number;\r\n    moveX: number;\r\n    isSwipeInProgress: boolean;\r\n\r\n    get visibleWidth() {\r\n        return this.utils.visibleWidth;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get element() {\r\n        return this.carouselProperties.cellsElement;\r\n    }\r\n\r\n    get freeScroll() {\r\n        return this.carouselProperties.freeScroll;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.carouselProperties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.carouselProperties.transitionTimingFunction;\r\n    }\r\n\r\n    get cellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cells.cellLength;\r\n        }\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get tooFewCells() {\r\n        return this.numberOfVisibleCells > this.cellLength;\r\n    }\r\n\r\n    get disabled() {\r\n        return this.tooFewCells;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells) {\r\n\r\n        this.init()\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    init() {\r\n        this.setWidth();\r\n    }\r\n\r\n    handleTouchstart() {\r\n        this.startX = this.utils.getStartX(event);\r\n        this.startTime = new Date().getTime();\r\n        this.initialElementPositionX = this.getInitialElementPositionX();\r\n    }\r\n\r\n    handleHorizontalSwipe() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isSwipeInProgress) {\r\n            this.startX = this.utils.getStartX(event);\r\n            this.startTime = new Date().getTime();\r\n            this.initialElementPositionX = this.getInitialElementPositionX();\r\n        }\r\n\r\n        this.isSwipeInProgress = true;\r\n        this.moveX = this.utils.getMoveX(event);\r\n        this.move();\r\n    }\r\n\r\n    handleTouchend(simpleProcessing: boolean = false) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        /* If touchend was passed to the Slide class */\r\n        if (simpleProcessing) {\r\n            this.isSwipeInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.isSwipeInProgress = false;\r\n        this.finishMoving();\r\n        this.clearInitialValues();\r\n    }\r\n\r\n    move() {\r\n        let positionX = this.getMovePositionX();\r\n        const isPulled = this.detectPulled();\r\n        const direction = this.getDirection();\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === \"left\" && direction === \"right\" ||\r\n                isPulled.edge === \"right\" && direction === \"left\") {\r\n                positionX = this.slowdownOnPull(positionX);\r\n            }\r\n        }\r\n\r\n        this.transformPositionX(positionX, 0);\r\n\r\n        if (this.freeScroll) {\r\n            this.initialPositionX = positionX;\r\n        }\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === 'left' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = 0;\r\n            }\r\n            if (isPulled.edge === 'right' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = positionX;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMovePositionX() {\r\n        const distance = this.getDistance();\r\n        return this.initialElementPositionX - distance;\r\n    }\r\n\r\n    getDistance() {\r\n        return this.startX - this.moveX;\r\n    }\r\n\r\n    /* If the container is pulled out of the left or right border */\r\n    detectPulled() {\r\n        const currentPositionX = this.getCurrentPositionX();\r\n\r\n        if (currentPositionX > 0) {\r\n            return {\r\n                edge: 'left',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX)\r\n            }\r\n        }\r\n\r\n        if (currentPositionX < this.getEndPosition()) {\r\n            return {\r\n                edge: 'right',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX - this.getEndPosition())\r\n            }\r\n        }\r\n    }\r\n\r\n    slowdownOnPull(_positionX) {\r\n        let distance = Math.abs(this.getDistance());\r\n        const endPosition = this.getEndPosition();\r\n        const isPulled = this.detectPulled();\r\n        const decelerationRatio = 3 + isPulled.overflowX / 50;\r\n        let positionX;\r\n\r\n        if (isPulled.edge === 'left') {\r\n\r\n            if (this.initialElementPositionX < 0) {\r\n                distance = distance - Math.abs(this.initialElementPositionX);\r\n            }\r\n\r\n            const rubberPositionX = distance / decelerationRatio;\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX > 0) {\r\n                positionX = this.initialElementPositionX + rubberPositionX;\r\n            }\r\n\r\n            if (positionX > this.pullLimit) {\r\n                positionX = this.pullLimit;\r\n            }\r\n        }\r\n\r\n        if (isPulled.edge === 'right') {\r\n            const rubberPositionX = endPosition + (((this.initialElementPositionX - distance) - endPosition) / decelerationRatio);\r\n            const containerWidth = this.getWidth();\r\n\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX < -(containerWidth - this.visibleWidth)) {\r\n                positionX = ((containerWidth - this.visibleWidth) + this.initialElementPositionX) + rubberPositionX;\r\n            }\r\n\r\n            if (positionX < endPosition - this.pullLimit) {\r\n                positionX = endPosition - this.pullLimit;\r\n            }\r\n        }\r\n\r\n        return positionX;\r\n    }\r\n\r\n    finishMoving() {\r\n        const positionX = this.getMovePositionX();\r\n        let newPositionX;\r\n\r\n        if (this.freeScroll) {\r\n            newPositionX = this.getInertia();\r\n        }\r\n\r\n        /* Align container while pulling */\r\n        newPositionX = this.getAlignedPositionOnPull(newPositionX);\r\n\r\n        this.transformPositionX(newPositionX);\r\n        this.setInitialPosition(positionX);\r\n    }\r\n\r\n    /* Returns the new position of the container with inertia */\r\n    getInertia() {\r\n        const distance = this.getDistance();\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.startTime;\r\n        let inertia = (distance / tapLength) * 100;\r\n\r\n        return this.initialPositionX - inertia;\r\n    }\r\n\r\n    getAlignedPositionOnPull(newPositionX) {\r\n        const direction = this.getDirection();\r\n\r\n        if (direction === 'left') {\r\n            let endPosition = this.getEndPosition();\r\n            if (newPositionX < endPosition) {\r\n                return endPosition;\r\n            }\r\n        }\r\n        if (direction === 'right') {\r\n            if (newPositionX > 0) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return newPositionX;\r\n    }\r\n\r\n    getCurrentPositionX() {\r\n        const parentPosition = this.element.parentElement.getBoundingClientRect();\r\n        const position = this.element.getBoundingClientRect();\r\n        return position.left - parentPosition.left;\r\n    }\r\n\r\n    getEndPosition() {\r\n        if (this.isLightDOM) {\r\n            let imagesInContainer = this.cells.imageUtils.getImages();\r\n            return -(imagesInContainer.length * this.fullCellWidth - this.visibleWidth - this.margin);\r\n        } else {\r\n            const width = this.getWidth();\r\n            const visibleWidth = this.element.parentElement.clientWidth;\r\n            return visibleWidth - width;\r\n        }\r\n    }\r\n\r\n    transformPositionX(value, duration = this.transitionDuration) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;\r\n        this.element.style.transform = 'translateX(' + value + 'px)';\r\n    }\r\n\r\n    getWidth() {\r\n        let width = this.cellLengthInLightDOMMode * this.fullCellWidth;\r\n        let totalImageWidth = this.cellLength * this.fullCellWidth;\r\n\r\n        if (totalImageWidth < width) {\r\n            width = totalImageWidth;\r\n        }\r\n\r\n        return this.isLightDOM ? width : totalImageWidth;\r\n    }\r\n\r\n    setWidth() {\r\n        const width = this.getWidth();\r\n        this.element.style.width = width + \"px\";\r\n    }\r\n\r\n    setInitialPosition(position) {\r\n        this.initialPositionX = position;\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getInitialElementPositionX() {\r\n        const carouselElementPosition = this.utils.getCarouselElementPosition()['left'];\r\n        return this.getElementPosition()['left'] - carouselElementPosition;\r\n    }\r\n\r\n    clearInitialValues() {\r\n        this.startX = this.moveX = undefined;\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.startX - this.moveX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class ImageUtils {\r\n    cellStack;\r\n    imageStack;\r\n    element;\r\n\r\n    constructor(element) {\r\n        this.element = element;\r\n    }\r\n\r\n    getImages() {\r\n        return this.cellStack.filter(this.filter);\r\n    }\r\n\r\n    comparePositions(a, b) {\r\n        if (a.positionX < b.positionX) {\r\n            return -1;\r\n        }\r\n        if (a.positionX > b.positionX) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    filter(cell) {\r\n        return cell.img !== undefined;\r\n    }\r\n}\r\n\r\nexport class Cells {\r\n    cells: HTMLCollection;\r\n    element: HTMLElement;\r\n    visibleWidth: number;\r\n    counter: number = 0;\r\n    imageUtils;\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get cellLength() {\r\n        return this.cells.length;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils) {\r\n\r\n        this.imageUtils = new ImageUtils(this.element);\r\n        this.init(carouselProperties);\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    lineUp() {\r\n        const cells = this.element.children;\r\n        this.imageUtils.cellStack = [];\r\n\r\n        for (var i = 0; i < cells.length; i++) {\r\n            let cell = cells[i];\r\n            let positionX = this.getCellPositionInContainer(i);\r\n            (cell as HTMLElement).style.transform = 'translateX(' + positionX + 'px)';\r\n            (cell as HTMLElement).style.width = this.carouselProperties.cellWidth + 'px';\r\n\r\n            if (this.getImage(i)) {\r\n                this.imageUtils.cellStack.push({\r\n                    index: i,\r\n                    positionX,\r\n                    img: this.getImage(i)['image']\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    ifSequenceOfCellsIsChanged() {\r\n        const cells = this.element.children;\r\n        return cells[0]['style'].transform !== 'translateX(0px)';\r\n    }\r\n\r\n    getCellPositionInContainer(cellIndexInDOMTree) {\r\n        let positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        return positionIndex * this.fullCellWidth;\r\n    }\r\n\r\n    getCellIndexInContainer(cellIndexInDOMTree) {\r\n        let positionIndex;\r\n\r\n        if (!this.isLightDOM) {\r\n            return cellIndexInDOMTree;\r\n        }\r\n\r\n        let cellLength = this.cellLengthInLightDOMMode;\r\n        let counter = this.counter - this.overflowCellsLimit;\r\n\r\n        if (counter > cellLength) {\r\n            counter = counter % cellLength;\r\n        }\r\n\r\n        if (counter < 0) {\r\n            return cellIndexInDOMTree;\r\n        } else {\r\n            positionIndex = cellIndexInDOMTree - counter;\r\n            if (positionIndex < 0) {\r\n                positionIndex = cellLength + positionIndex;\r\n            }\r\n        }\r\n\r\n        return positionIndex;\r\n    }\r\n\r\n    getImage(cellIndex) {\r\n        if (!this.images) {\r\n            return;\r\n        }\r\n\r\n        let imageIndex = this.getImageIndex(cellIndex);\r\n        let file = this.images[imageIndex];\r\n\r\n        if (file && !file.type) {\r\n            file.type = 'image';\r\n        }\r\n\r\n        return {\r\n            image: this.images[imageIndex],\r\n            imageIndex\r\n        };\r\n    }\r\n\r\n    getImageIndex(cellIndexInDOMTree: number) {\r\n        const positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        let imageIndex;\r\n\r\n        if (this.counter > this.overflowCellsLimit) {\r\n            let cellLimitOverflow = this.counter - this.overflowCellsLimit;\r\n            imageIndex = positionIndex + cellLimitOverflow;\r\n\r\n            if (this.images && this.carouselProperties.loop) {\r\n                imageIndex = imageIndex % this.images.length;\r\n            }\r\n        } else {\r\n            imageIndex = cellIndexInDOMTree;\r\n        }\r\n\r\n        return imageIndex;\r\n    }\r\n\r\n    setCounter(value: number) {\r\n        this.counter = value;\r\n    }\r\n\r\n    init(carouselProperties: CarouselProperties) {\r\n        this.element = this.carouselProperties.cellsElement;\r\n        this.cells = this.element.children;\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.element.parentElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport interface Properties {\r\n    carouselProperties: CarouselProperties;\r\n}\r\n\r\nexport class Slide {\r\n    slideLength: number;\r\n    isSlideInProgress: boolean;\r\n    direction: 'left' | 'right';\r\n    counter: number = 0;\r\n    _counter: number = 0;\r\n    distance;\r\n    distanceAbs;\r\n    visibleWidth: number;\r\n    isNotClickOnArrow: boolean;\r\n    initialPositionX: number = 0;\r\n    currentPositionX: number = 0;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.carouselProperties.minSwipeDistance;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return this.utils.visibleCellsOverflowContainer;\r\n    }\r\n\r\n    /* The position to which the container returns after each slide \r\n     * in the light DUM tree mode. \r\n     */\r\n    get fixedContainerPosition() {\r\n        return -(this.overflowCellsLimit * this.fullCellWidth);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    /* Number of cell elements in the DUM tree */\r\n    get cellLength() {\r\n        if (this.isLightDOM) {\r\n            return this.cells.cellLengthInLightDOMMode;\r\n        } else {\r\n            if (this.images) {\r\n                return this.images.length;\r\n            } else {\r\n                return this.cells.cellLength;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells,\r\n        private container) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n        this.setVisibleWidth();\r\n    }\r\n\r\n    init() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n\r\n    handleTouchstart(event) {\r\n        /* Touchstart event is not called for arrow */\r\n        this.isNotClickOnArrow = true;\r\n        this.isSlideLengthLimited = undefined;\r\n\r\n        if (!this.isSlideInProgress) {\r\n            this.initialPositionX = this.container.getCurrentPositionX();\r\n        }\r\n    }\r\n\r\n    handleTouchend(event) {\r\n        if (!this.isNotClickOnArrow) {\r\n            return;\r\n        }\r\n        this.currentPositionX = this.container.getCurrentPositionX();\r\n        this.distanceAbs = Math.abs(this.initialPositionX - this.currentPositionX);\r\n        this.distance = this.initialPositionX - this.currentPositionX;\r\n        this.direction = this.getDirection();\r\n        this.isNotClickOnArrow = undefined;\r\n        this.handleSlide();\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.setCounter();\r\n        this.isSlideInProgress = false;\r\n\r\n        if (this.isLightDOM) {\r\n            this.alignContainerFast();\r\n        }\r\n    }\r\n\r\n    detectClickOnArrow(event) {\r\n        return event.target.classList.contains(\"carousel-arrow\");\r\n    }\r\n\r\n    handleSlide(customSlideLength: number = undefined) {\r\n        let isUsingButton = customSlideLength;\r\n        let newPositionX;\r\n\r\n        if (isUsingButton && this.isSlideInProgress || !this.direction) {\r\n            return;\r\n        }\r\n\r\n        /* Custom slide length is used in arrows */\r\n        if (customSlideLength) {\r\n            this.slideLength = this.limitSlideLength(customSlideLength);\r\n\r\n            if (!this.isSlideInProgress) {\r\n                this.initialPositionX = this.container.getCurrentPositionX();\r\n            }\r\n        } else {\r\n            this.slideLength = this.getSlideLength(this.distanceAbs);\r\n        }\r\n\r\n        /* Store intermediate counter value */\r\n        this._counter = this.getPreliminaryCounter();\r\n\r\n        if (this.direction === 'left') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.limitSlideLength(this.getSlideLength(this.distanceAbs));\r\n            }\r\n\r\n            this._counter = this.getPreliminaryCounter();\r\n            let isSlidesEnd = this.isSlidesEnd(this._counter);\r\n            newPositionX = this.getPositionByIndex(this._counter);\r\n\r\n            if (isSlidesEnd) {\r\n                this._counter = this.counter;\r\n\r\n                newPositionX = this.getPositionByIndex(this.counter);\r\n                this.slideLength = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.getSlideLength(this.distanceAbs);\r\n            }\r\n\r\n            if (this._counter < 0) {\r\n                this._counter = this.counter;\r\n                this.slideLength = this.counter;\r\n            }\r\n\r\n            newPositionX = this.getPositionByIndex(this.counter - this.slideLength);\r\n        }\r\n\r\n        if (this.container.getCurrentPositionX() !== newPositionX) {\r\n            this.isSlideInProgress = true;\r\n            this.container.transformPositionX(newPositionX);\r\n        }\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        this.direction = 'left';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.direction = 'right';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    select(index: number) {\r\n        if (index > this.cellLength - 1) {\r\n            return;\r\n        }\r\n\r\n        if (index > this.counter) {\r\n            let length = index - this.counter;\r\n            this.next(length);\r\n        }\r\n\r\n        if (index < this.counter) {\r\n            let length = this.counter - index;\r\n            this.prev(length);\r\n        }\r\n    }\r\n\r\n    getPreliminaryCounter() {\r\n        if (this.direction === 'left') {\r\n            return this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            return this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    /*  \r\n     * Limits the length of the slide during calls to the next() and prev() \r\n     * methods if the specified position is outside the cell length \r\n     */\r\n    limitSlideLength(slideLength: number) {\r\n        if (slideLength > 1) {\r\n            for (var i = 0; i < slideLength; i++) {\r\n                let newCounter = this.counter + (slideLength - i);\r\n\r\n                if (!this.isSlidesEnd(newCounter)) {\r\n                    slideLength = slideLength - i;\r\n                    this.isSlideLengthLimited = i > 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return slideLength;\r\n    }\r\n\r\n    /* Offset the container to show the last cell completely */\r\n    getPositionCorrection(counter) {\r\n        let correction = 0;\r\n        let isLastSlide = this.isLastSlide(counter);\r\n\r\n        if (this.carouselProperties.loop || this.direction === \"right\") {\r\n            return 0;\r\n        }\r\n\r\n        if (this.isSlideLengthLimited || isLastSlide) {\r\n            let cellsWidth = this.cells.cellLengthInLightDOMMode * this.fullCellWidth;\r\n\r\n            if (this.visibleWidth < cellsWidth) {\r\n                correction = -(this.numberOfVisibleCells * this.fullCellWidth - this.visibleWidth - this.margin);\r\n            }\r\n\r\n            if (correction >= -this.margin) {\r\n                correction = 0;\r\n            }\r\n        }\r\n\r\n        return correction;\r\n    }\r\n\r\n    getSlideLength(distanceAbs) {\r\n        let isLastSlide = this.isLastSlide(this.counter);\r\n\r\n        /* If the last cell does not fit entirely, then the \r\n         * length of the swipe to the left, from the extreme \r\n         * right position, may be shorter than usual. \r\n         */\r\n        if (isLastSlide && this.direction === \"right\") {\r\n            distanceAbs = distanceAbs + this.visibleWidth % this.fullCellWidth;\r\n        }\r\n\r\n        let length = Math.floor(distanceAbs / this.fullCellWidth);\r\n\r\n        if (distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {\r\n            length++;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    getDistanceAbs() {\r\n        return Math.abs(this.initialPositionX - this.currentPositionX);\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.initialPositionX - this.currentPositionX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n\r\n    isSlidesEnd(counter: number) {\r\n        let margin = this.visibleCellsOverflowContainer ? 1 : 0;\r\n        let imageLength = this.images ? this.images.length : this.cells.cellLength;\r\n\r\n        if (this.carouselProperties.loop) {\r\n            return false;\r\n        } else {\r\n            return (imageLength - counter + margin) < this.numberOfVisibleCells;\r\n        }\r\n    }\r\n\r\n    isLastSlide(counter: number) {\r\n        return this.isSlidesEnd(counter + 1)\r\n    }\r\n\r\n    setCounter() {\r\n        if (this.direction === 'left') {\r\n            this.counter = this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.counter = this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    getPositionByIndex(_counter) {\r\n        let correction = this.getPositionCorrection(this.counter + this.slideLength);\r\n        let position;\r\n\r\n        if (correction !== 0) {\r\n            correction = correction + this.fullCellWidth\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            correction = 0;\r\n        }\r\n\r\n        if (this.isLightDOM && this.isLightDOMMode(_counter) ||\r\n            this.isLightDOM && this.ifLeftDOMModeAtEnd(_counter)) {\r\n\r\n            let initialPosition = this.getPositionWithoutCorrection(this.initialPositionX);\r\n            let counterDifference = _counter - this.counter;\r\n            position = initialPosition - ((counterDifference * this.fullCellWidth) - correction);\r\n        } else {\r\n            position = -((_counter * this.fullCellWidth) - correction);\r\n        }\r\n\r\n        position = this.provideSafePosition(position);\r\n\r\n        return position;\r\n    }\r\n\r\n    provideSafePosition(position) {\r\n        const endPosition = this.container.getEndPosition();\r\n\r\n        if (this.direction === 'left') {\r\n            if (position > 0) {\r\n                position = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (position < endPosition) {\r\n                position = endPosition;\r\n            }\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    getPositionWithoutCorrection(value) {\r\n        let remainder = value % this.fullCellWidth;\r\n\r\n        if (remainder !== 0) {\r\n            return value - (this.fullCellWidth + remainder);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        return this.isLastSlide(this.counter) || \r\n        (!this.visibleCellsOverflowContainer && this.cellLength <= this.numberOfVisibleCells) ||\r\n        (this.visibleCellsOverflowContainer && this.cellLength < this.numberOfVisibleCells)\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        return this.counter === 0;\r\n    }\r\n\r\n    alignContainerFast() {\r\n        if (this.isLightDOMMode(this.counter)) {\r\n            let positionX = this.fixedContainerPosition;\r\n            this.container.transformPositionX(positionX, 0);\r\n\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        } else if (this.ifLeftDOMModeToBeginning(this.counter)) {\r\n            /* If we have already exited the light DOM mode but \r\n             * the cells are still out of place \r\n             */\r\n            if (this.cells.ifSequenceOfCellsIsChanged()) {\r\n                let positionX = -(this.counter * this.fullCellWidth);\r\n                this.container.transformPositionX(positionX, 0);\r\n\r\n                this.cells.setCounter(this.counter);\r\n                this.cells.lineUp();\r\n            }\r\n        } else if (this.ifLeftDOMModeAtEnd(this.counter)) {\r\n            let containerPositionX = this.container.getCurrentPositionX();\r\n            let containerWidth = this.container.getWidth();\r\n            this.visibleWidth;\r\n\r\n            if (this.isLastSlide(this.counter) &&\r\n                containerWidth + containerPositionX >= this.visibleWidth) {\r\n                return;\r\n            }\r\n\r\n            let correction = this.getPositionCorrection(this.counter);\r\n\r\n            if (correction !== 0) {\r\n                correction = correction + this.fullCellWidth\r\n            }\r\n\r\n            if (this.direction === 'right') {\r\n                correction = 0;\r\n            }\r\n\r\n            let positionX = this.fixedContainerPosition + correction;\r\n\r\n            this.container.transformPositionX(positionX, 0);\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        }\r\n    }\r\n\r\n    isLightDOMMode(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (!this.isLightDOM) {\r\n            return false;\r\n        }\r\n\r\n        if (counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            this.counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            this.counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeAtEnd(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeToBeginning(counter) {\r\n        let flag;\r\n\r\n        if (counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    setVisibleWidth() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Utils {\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            let overflowCellsLimit = Math.floor((this.images.length - this.numberOfVisibleCells) / 2);\r\n\r\n            if (overflowCellsLimit < 0) {\r\n                overflowCellsLimit = 0;\r\n            }\r\n            \r\n            return overflowCellsLimit;\r\n        } else {\r\n            return this.carouselProperties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.carouselProperties.overflowCellsLimit * 2 + this.numberOfVisibleCells > this.images.length;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return (this.numberOfVisibleCells * this.fullCellWidth - this.margin) > this.visibleWidth;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get visibleWidth() {\r\n        return this.carouselProperties.visibleWidth || this.carouselProperties.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties) {\r\n\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    getStartX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPosition = this.getCarouselElementPosition()['left'];\r\n        let startX;\r\n\r\n        if (touches) {\r\n            startX = touches[0].clientX - carouselElementPosition;\r\n        } else {\r\n            startX = event.clientX - carouselElementPosition;\r\n        }\r\n\r\n        return startX;\r\n    }\r\n\r\n    getMoveX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPositionX = this.getCarouselElementPosition()['left'];\r\n\r\n        if (touches) {\r\n            return touches[0].clientX - carouselElementPositionX;\r\n        } else {\r\n            return event.clientX - carouselElementPositionX;\r\n        }\r\n    }\r\n\r\n    getCarouselElementPosition() {\r\n        return this.carouselProperties.hostElement.getBoundingClientRect();\r\n    }\r\n}","import {ChangeDetectorRef, Component, ElementRef, ViewChild, EventEmitter, HostBinding, HostListener, Input, Output, OnDestroy, SimpleChanges} from '@angular/core';\r\n\r\nimport {Images} from './interfaces';\r\nimport {Touches} from './touches';\r\nimport {Carousel} from './carousel';\r\nimport {Container} from './container';\r\nimport {Cells} from './cells';\r\nimport {Slide} from './slide';\r\nimport {Utils} from './utils';\r\nimport {Properties as CarouselProperties} from './interfaces';\r\n\r\n\r\n@Component({\r\n    selector: 'carousel, [carousel]',\r\n    templateUrl: './carousel.component.html',\r\n    styleUrls: ['./carousel.component.sass']\r\n})\r\n\r\nexport class CarouselComponent implements OnDestroy {\r\n    carousel;\r\n    container;\r\n    utils;\r\n    cells;\r\n    slide;\r\n    _id: string;\r\n    _images: Images;\r\n    touches: any;\r\n    landscapeMode: any;\r\n    minTimeout = 30;\r\n    isVideoPlaying: boolean;\r\n    _isCounter: boolean;\r\n    _width: number;\r\n    _cellWidth: number | '100%' = 200;\r\n    _loop: boolean = false;\r\n    _lightDOM: boolean = false;\r\n    isMoving: boolean;\r\n    isNgContent: boolean;\r\n    cellLength: number;\r\n    dotsArr: any;\r\n    carouselProperties: CarouselProperties;\r\n    savedCarouselWidth: number;\r\n\r\n    get isContainerLocked() {\r\n        if (this.carousel) {\r\n            return this.carousel.isContainerLocked;\r\n        }\r\n    }\r\n\r\n    get slideCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.slideCounter;\r\n        }\r\n    }\r\n\r\n    get lapCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.lapCounter;\r\n        }\r\n    }\r\n\r\n    get isLandscape() {\r\n        return window.innerWidth > window.innerHeight;\r\n    }\r\n\r\n    get isSafari(): any {\r\n        const ua = navigator.userAgent.toLowerCase();\r\n        if (ua.indexOf('safari') !== -1) {\r\n            return !(ua.indexOf('chrome') > -1);\r\n        }\r\n    }\r\n\r\n    get counter() {\r\n        let counter;\r\n\r\n        if (this.loop) {\r\n            counter = this.slideCounter % this.cellLength;\r\n        } else {\r\n            counter = this.slideCounter;\r\n        }\r\n\r\n        return counter + 1 + this.counterSeparator + this.cellLength;\r\n    }\r\n\r\n    get cellsElement() {\r\n        return this.elementRef.nativeElement.querySelector('.carousel-cells');\r\n    }\r\n\r\n    get isArrows() {\r\n        return this.arrows && !this.freeScroll;\r\n    }\r\n\r\n    get isCounter() {\r\n        return this._isCounter && this.cellLength > 1;\r\n    }\r\n\r\n    get activeDotIndex() {\r\n        return this.slideCounter % this.cellLength;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.carousel) {\r\n            return this.carousel.cellLimit;\r\n        }\r\n    }\r\n\r\n    get carouselWidth() {\r\n        return this.elementRef.nativeElement.clientWidth;\r\n    }\r\n\r\n    @Output() events: EventEmitter < any > = new EventEmitter < any > ();\r\n\r\n    @Input() id: number;\r\n    @Input() height: number = 200;\r\n    @Input() width: number;\r\n    @Input() autoplay: boolean = false;\r\n    @Input() autoplayInterval: number = 5000;\r\n    @Input() pauseOnHover: boolean = true;\r\n    @Input() dots: boolean = false;\r\n    @Input() borderRadius: number;\r\n    @Input() margin: number = 10;\r\n    @Input() objectFit: 'contain' | 'cover' | 'none' = 'cover';\r\n    @Input() minSwipeDistance: number = 10;\r\n    @Input() transitionDuration: number = 200;\r\n    @Input() transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' = 'ease-out';\r\n    @Input() videoProperties: any;\r\n    @Input() counterSeparator: string = \" / \";\r\n    @Input() overflowCellsLimit: number = 3;\r\n    @Input() listeners: 'auto' | 'mouse and touch' = 'mouse and touch';\r\n    @Input() cellsToShow: number;\r\n    @Input() cellsToScroll: number = 1;\r\n    @Input() freeScroll: boolean = false;\r\n    @Input() arrows: boolean = true;\r\n    @Input() arrowsOutside: boolean;\r\n    @Input() arrowsTheme: 'light' | 'dark' = 'light';\r\n\r\n    @Input()\r\n    set images(images: Images & any) {\r\n        this._images = images;\r\n    }\r\n    get images() {\r\n        return this._images;\r\n    }\r\n\r\n    @Input('cellWidth') set cellWidth(value: number | '100%') {\r\n        if (value) {\r\n            this._cellWidth = value;\r\n        }\r\n    }\r\n\r\n    @Input('counter') set isCounter(value: boolean) {\r\n        if (value) {\r\n            this._isCounter = value;\r\n        }\r\n    }\r\n\r\n    @Input('loop') set loop(value: boolean) {\r\n        if (value) {\r\n            this._loop = value;\r\n        }\r\n    }\r\n\r\n    get loop() {\r\n        return this._loop;\r\n    }\r\n\r\n    @Input('lightDOM') set lightDOM(value: boolean) {\r\n        if (value) {\r\n            this._lightDOM = value;\r\n        }\r\n    }\r\n\r\n    get lightDOM() {\r\n        if (this.images) {\r\n            return this._lightDOM;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @HostBinding('class.carousel') hostClassCarousel: boolean = true;\r\n    @HostBinding('style.height') hostStyleHeight: string;\r\n    @HostBinding('style.width') hostStyleWidth: string;\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onWindowResize(event: any) {\r\n        if (this.utils.visibleWidth !== this.savedCarouselWidth) {\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    @HostListener('mousemove', ['$event'])\r\n    onMousemove(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.stopAutoplay();\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseleave', ['$event'])\r\n    onMouseleave(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private ref: ChangeDetectorRef) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isNgContent = this.cellsElement.children.length > 0;\r\n\r\n        this.touches = new Touches({\r\n            element: this.cellsElement,\r\n            listeners: this.listeners,\r\n            mouseListeners: {\r\n                \"mousedown\": \"handleMousedown\",\r\n                \"mouseup\": \"handleMouseup\"\r\n            }\r\n        });\r\n\r\n        this.touches.on('touchstart', this.handleTouchstart);\r\n        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);\r\n        this.touches.on('touchend', this.handleTouchend);\r\n        this.touches.on('mousedown', this.handleTouchstart);\r\n        this.touches.on('mouseup', this.handleTouchend);\r\n        this.touches.on('tap', this.handleTap);\r\n\r\n        this.setDimensions();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initCarousel();\r\n\r\n        if (this.autoplay) {\r\n            this.carousel.autoplay();\r\n        }\r\n\r\n        this.cellLength = this.getCellLength();\r\n        this.dotsArr = Array(this.cellLength).fill(1);\r\n        this.ref.detectChanges();\r\n        this.carousel.lineUpCells();\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        /* Start detecting changes in the DOM tree */\r\n        this.detectDomChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.width || changes.height || changes.images) {\r\n            this.setDimensions();\r\n            this.initCarousel();\r\n            this.carousel.lineUpCells();\r\n            this.ref.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.touches.destroy();\r\n        //this.carousel.destroy();\r\n    }\r\n\r\n    initCarousel() {\r\n        this.carouselProperties = {\r\n            id: this.id,\r\n            cellsElement: this.elementRef.nativeElement.querySelector('.carousel-cells'),\r\n            hostElement: this.elementRef.nativeElement,\r\n            images: this.images,\r\n            cellWidth: this.getCellWidth(),\r\n            loop: this.loop,\r\n            autoplayInterval: this.autoplayInterval,\r\n            overflowCellsLimit: this.overflowCellsLimit,\r\n            visibleWidth: this.width,\r\n            margin: this.margin,\r\n            minSwipeDistance: this.minSwipeDistance,\r\n            transitionDuration: this.transitionDuration,\r\n            transitionTimingFunction: this.transitionTimingFunction,\r\n            videoProperties: this.videoProperties,\r\n            eventHandler: this.events,\r\n            freeScroll: this.freeScroll,\r\n            lightDOM: this.lightDOM\r\n        };\r\n\r\n        this.utils = new Utils(this.carouselProperties);\r\n        this.cells = new Cells(this.carouselProperties, this.utils);\r\n        this.container = new Container(this.carouselProperties, this.utils, this.cells);\r\n        this.slide = new Slide(this.carouselProperties, this.utils, this.cells, this.container);\r\n        this.carousel = new Carousel(this.carouselProperties, this.utils, this.cells, this.container, this.slide);\r\n    \r\n        if (this.autoplay) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        this.landscapeMode = this.isLandscape;\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        this.carouselProperties.cellWidth = this.getCellWidth();\r\n        this.cells.updateProperties(this.carouselProperties);\r\n        this.carousel.updateProperties(this.carouselProperties);\r\n        this.container.updateProperties(this.carouselProperties);\r\n        this.slide.updateProperties(this.carouselProperties);\r\n        this.utils.updateProperties(this.carouselProperties);\r\n        this.carousel.lineUpCells();\r\n        this.slide.select(0);\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    detectDomChanges() {\r\n        const observer = new MutationObserver((mutations) => {\r\n            this.onDomChanges();\r\n        });\r\n\r\n        var config = {\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true\r\n        };\r\n        observer.observe(this.cellsElement, config);\r\n    }\r\n\r\n    onDomChanges() {\r\n        this.cellLength = this.getCellLength();\r\n        this.carousel.lineUpCells();\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    setDimensions() {\r\n        this.hostStyleHeight = this.height + 'px';\r\n        this.hostStyleWidth = this.width + 'px';\r\n    }\r\n\r\n    getImage(index) {\r\n        return this.carousel.getImage(index);\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        //event.preventDefault();\r\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.carousel.handleTouchstart(event);\r\n        this.isMoving = true;\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        event.preventDefault();\r\n        this.carousel.handleHorizontalSwipe(event);\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n        this.carousel.handleTouchend(event);\r\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.isMoving = false;\r\n    }\r\n\r\n    handleTap = (event: any) => {\r\n        let outboundEvent: any = {\r\n            name: 'click'\r\n        }\r\n        let nodes = Array.prototype.slice.call(this.cellsElement.children);\r\n        let cellElement = event.srcElement.closest(\".carousel-cell\");\r\n        const i = nodes.indexOf(cellElement);\r\n        const cellIndex = nodes.indexOf(cellElement);\r\n\r\n        if (this.images) {\r\n            //outboundEvent.fileIndex = this.carousel.getFileIndex(i);\r\n            //outboundEvent.file = this.carousel.getFile(cellIndex);\r\n        } else {\r\n            outboundEvent.cellIndex = cellIndex;\r\n        }\r\n    }\r\n\r\n    handleTransitionendCellContainer(event) {\r\n        this.carousel.handleTransitionend();\r\n    }\r\n\r\n    toggleVideo(video) {\r\n        event.preventDefault();\r\n        if (this.videoProperties.noPlay) {\r\n            return;\r\n        }\r\n\r\n        if (video.paused) {\r\n            video.play();\r\n            this.isVideoPlaying = true;\r\n        } else {\r\n            video.pause();\r\n            this.isVideoPlaying = false;\r\n        }\r\n\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    getCellWidth() {\r\n        let elementWidth = this.carouselWidth;\r\n\r\n        if (this.cellsToShow) {\r\n            let margin = this.cellsToShow > 1 ? this.margin : 0;\r\n            let totalMargin = margin * (this.cellsToShow - 1);\r\n            return (elementWidth - totalMargin) / this.cellsToShow;\r\n        }\r\n\r\n        if (this._cellWidth === '100%') {\r\n            return elementWidth;\r\n        } else {\r\n            return this._cellWidth;\r\n        }\r\n    }\r\n\r\n    next() {\r\n        this.carousel.next(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    prev() {\r\n        this.carousel.prev(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isNextArrowDisabled();\r\n        }\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isPrevArrowDisabled();\r\n        }\r\n    }\r\n\r\n    getCellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cellsElement.children.length;\r\n        }\r\n    }\r\n}","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CarouselComponent} from './carousel.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CarouselComponent\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        CarouselComponent\r\n    ],\r\n    providers: [\r\n\r\n    ],\r\n    bootstrap: [\r\n        \r\n    ],\r\n    entryComponents: [\r\n        CarouselComponent\r\n    ]\r\n})\r\nexport class IvyCarouselModule { }\r\n","import { NgModule } from '@angular/core';\nimport { AngularResponsiveCarouselComponent } from './angular-responsive-carousel.component';\nimport { IvyCarouselModule } from './carousel/carousel.module';\n\n\n\n@NgModule({\n  declarations: [AngularResponsiveCarouselComponent],\n  imports: [\n    IvyCarouselModule\n  ],\n  exports: [AngularResponsiveCarouselComponent, IvyCarouselModule]\n})\nexport class AngularResponsiveCarouselModule { }\n"]}
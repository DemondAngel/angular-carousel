{"version":3,"sources":["../../../projects/angular-responsive-carousel/src/lib/touches.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.ts","../../../projects/angular-responsive-carousel/src/lib/container.ts","../../../projects/angular-responsive-carousel/src/lib/cells.ts","../../../projects/angular-responsive-carousel/src/lib/slide.ts","../../../projects/angular-responsive-carousel/src/lib/utils.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.module.ts"],"names":["Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","wheel","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","detectLinearSwipe","swipeType","handleLinearSwipe","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","prototype","touchListeners","mouseListeners","otherListeners","destroy","action","listeners","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","Carousel","utils","cells","container","slide","isContentImages","isLazyLoad","isContainerLocked","alignCells","initialContainerPosition","containerPullLimit","handleHorizontalSwipe","freeScroll","isNextArrowDisabled","isPrevArrowDisabled","init","cellLength","images","numberOfVisibleCells","overflowCellsLimit","isLightDOM","cellLimit","lightDOM","loop","margin","minSwipeDistance","transitionDuration","transitionTimingFunction","cellWidth","floor","counter","cellLengthInLightDOMMode","updateProperties","cellsElement","visibleWidth","parentElement","clientWidth","clearInterval","autoplayId","lineUpCells","lineUp","handleTransitionend","getImage","next","prev","autoplay","setInterval","autoplayInterval","stopAutoplay","Container","carouselProperties","newPositionIndex","initialPositionX","initialElementPositionX","isLocked","pullLimit","tooFewCells","setWidth","getStartX","startTime","getInitialElementPositionX","disabled","isSwipeInProgress","moveX","getMoveX","move","simpleProcessing","finishMoving","clearInitialValues","positionX","getMovePositionX","isPulled","detectPulled","direction","getDirection","edge","slowdownOnPull","transformPositionX","overflowX","distance","getDistance","currentPositionX","getCurrentPositionX","getEndPosition","_positionX","endPosition","decelerationRatio","rubberPositionX","containerWidth","getWidth","newPositionX","getInertia","getAlignedPositionOnPull","setInitialPosition","inertia","parentPosition","imageUtils","getImages","fullCellWidth","width","value","duration","style","transition","transform","totalImageWidth","position","carouselElementPosition","getCarouselElementPosition","sign","ImageUtils","cellStack","filter","comparePositions","a","b","cell","img","Cells","children","getCellPositionInContainer","push","ifSequenceOfCellsIsChanged","cellIndexInDOMTree","getCellIndexInContainer","positionIndex","cellIndex","imageIndex","getImageIndex","file","type","image","setCounter","Slide","_counter","visibleCellsOverflowContainer","setVisibleWidth","hostElement","isNotClickOnArrow","isSlideLengthLimited","isSlideInProgress","distanceAbs","handleSlide","alignContainerFast","detectClickOnArrow","target","classList","contains","customSlideLength","slideLength","limitSlideLength","getSlideLength","getPreliminaryCounter","isSlidesEnd","getPositionByIndex","select","newCounter","getPositionCorrection","correction","isLastSlide","cellsWidth","getDistanceAbs","imageLength","isLightDOMMode","ifLeftDOMModeAtEnd","getPositionWithoutCorrection","provideSafePosition","remainder","fixedContainerPosition","ifLeftDOMModeToBeginning","containerPositionX","flag","remainderOfCells","Utils","isImagesLessCellLimit","ceil","carouselElementPositionX","CarouselComponent","elementRef","ref","minTimeout","_cellWidth","_loop","_lightDOM","events","EventEmitter","height","pauseOnHover","dots","objectFit","counterSeparator","cellsToScroll","arrows","arrowsTheme","hostClassCarousel","carousel","isMoving","preventDefault","handleTap","nodes","Array","slice","call","cellElement","srcElement","closest","indexOf","slideCounter","lapCounter","innerWidth","innerHeight","ua","navigator","userAgent","toLowerCase","nativeElement","querySelector","_isCounter","_images","onWindowResize","savedCarouselWidth","onMousemove","onMouseleave","ngOnInit","isNgContent","setDimensions","ngAfterViewInit","initCarousel","getCellLength","dotsArr","fill","detectChanges","carouselWidth","detectDomChanges","ngOnChanges","changes","ngOnDestroy","id","getCellWidth","videoProperties","eventHandler","landscapeMode","isLandscape","MutationObserver","mutations","onDomChanges","observe","attributes","childList","characterData","hostStyleHeight","hostStyleWidth","handleTransitionendCellContainer","toggleVideo","video","noPlay","paused","play","isVideoPlaying","pause","elementWidth","cellsToShow","Component","args","selector","template","ElementRef","ChangeDetectorRef","Output","Input","HostBinding","HostListener","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents"],"mappings":"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","sourcesContent":["export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string, handler: string) {\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string, handler: string) {\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", event);\r\n            } else {\r\n                this.runHandler(\"longtap\", event);\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","import {Properties} from './interfaces';\r\n\r\nexport class Carousel {\r\n    cellsElement: HTMLElement;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    isContentImages: boolean = true;\r\n    visibleWidth: number;\r\n    isLazyLoad: boolean = true;\r\n    isContainerLocked: boolean = true;\r\n    alignCells: \"left\" | \"center\" = \"left\";\r\n    initialContainerPosition: number = 0;\r\n    autoplayId: any;\r\n    startTime;\r\n    containerPullLimit = 100;\r\n\r\n    get cellLength() {\r\n        return this.cells.cellLength;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get lastCellIndex() {\r\n        return this.images.length ? (this.images.length - 1) : (this.cells.cellLength - 1);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.isLightDOM) {\r\n            let cellLimit = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLimit < this.numberOfVisibleCells) {\r\n                cellLimit = this.numberOfVisibleCells;\r\n            }\r\n\r\n            return cellLimit;\r\n        } else {\r\n            return this.properties.images.length;\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.properties.lightDOM || this.properties.loop;\r\n    }\r\n\r\n    get images() {\r\n        return this.properties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.properties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.properties.minSwipeDistance;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.properties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.properties.transitionTimingFunction;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.properties.cellWidth + this.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get lapCounter() {\r\n        return Math.floor(this.slide.counter / this.cellLengthInLightDOMMode);\r\n    }\r\n\r\n    get slideCounter() {\r\n        return this.slide.counter;\r\n    }\r\n\r\n    constructor(\r\n        private properties: Properties,\r\n        private utils,\r\n        private cells,\r\n        private container,\r\n        private slide) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(properties: Properties) {\r\n        this.properties = properties;\r\n    }\r\n\r\n    init() {\r\n        this.cellsElement = this.properties.cellsElement;\r\n        this.visibleWidth = this.properties.visibleWidth || this.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    destroy() {\r\n        clearInterval(this.autoplayId);\r\n    }\r\n\r\n    lineUpCells() {\r\n        this.cells.lineUp();\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.container.handleTouchstart();\r\n        this.slide.handleTouchstart(event);\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        this.container.handleHorizontalSwipe();\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        if (this.properties.freeScroll) {\r\n            this.container.handleTouchend();\r\n        } else {\r\n            this.container.handleTouchend(true);\r\n            this.slide.handleTouchend(event);\r\n        }\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.slide.handleTransitionend();\r\n    }\r\n\r\n    getImage(index) {\r\n        return this.cells.getImage(index);\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        if (!this.isNextArrowDisabled()) {\r\n            this.slide.next(length);\r\n        }\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.slide.prev(length);\r\n    }\r\n\r\n    isNextArrowDisabled = () => {\r\n        return this.slide.isNextArrowDisabled();\r\n    }\r\n\r\n    isPrevArrowDisabled = () => {\r\n        return this.slide.isPrevArrowDisabled();\r\n    }\r\n\r\n    autoplay() {\r\n        this.autoplayId = setInterval(() => {\r\n            this.next();\r\n        }, this.properties.autoplayInterval);\r\n    }\r\n\r\n    stopAutoplay() {\r\n        if (this.autoplayId) {\r\n            clearInterval(this.autoplayId);\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Container {\r\n    /* The index of the new position relative to \r\n     * the active index, for example -1 or +1 \r\n     */\r\n    newPositionIndex: number = 0;\r\n    isPositionCorrection: boolean;\r\n    initialPositionX: number = 0;\r\n    initialElementPositionX: number = 0;\r\n    isLocked: boolean = true;\r\n    pullLimit = 100;\r\n    startTime;\r\n    startX: number;\r\n    moveX: number;\r\n    isSwipeInProgress: boolean;\r\n\r\n    get visibleWidth() {\r\n        return this.utils.visibleWidth;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get element() {\r\n        return this.carouselProperties.cellsElement;\r\n    }\r\n\r\n    get freeScroll() {\r\n        return this.carouselProperties.freeScroll;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.carouselProperties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.carouselProperties.transitionTimingFunction;\r\n    }\r\n\r\n    get cellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cells.cellLength;\r\n        }\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get tooFewCells() {\r\n        return this.numberOfVisibleCells > this.cellLength;\r\n    }\r\n\r\n    get disabled() {\r\n        return this.tooFewCells;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells) {\r\n\r\n        this.init()\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    init() {\r\n        this.setWidth();\r\n    }\r\n\r\n    handleTouchstart() {\r\n        this.startX = this.utils.getStartX(event);\r\n        this.startTime = new Date().getTime();\r\n        this.initialElementPositionX = this.getInitialElementPositionX();\r\n    }\r\n\r\n    handleHorizontalSwipe() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isSwipeInProgress) {\r\n            this.startX = this.utils.getStartX(event);\r\n            this.startTime = new Date().getTime();\r\n            this.initialElementPositionX = this.getInitialElementPositionX();\r\n        }\r\n\r\n        this.isSwipeInProgress = true;\r\n        this.moveX = this.utils.getMoveX(event);\r\n        this.move();\r\n    }\r\n\r\n    handleTouchend(simpleProcessing: boolean = false) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        /* If touchend was passed to the Slide class */\r\n        if (simpleProcessing) {\r\n            this.isSwipeInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.isSwipeInProgress = false;\r\n        this.finishMoving();\r\n        this.clearInitialValues();\r\n    }\r\n\r\n    move() {\r\n        let positionX = this.getMovePositionX();\r\n        const isPulled = this.detectPulled();\r\n        const direction = this.getDirection();\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === \"left\" && direction === \"right\" ||\r\n                isPulled.edge === \"right\" && direction === \"left\") {\r\n                positionX = this.slowdownOnPull(positionX);\r\n            }\r\n        }\r\n\r\n        this.transformPositionX(positionX, 0);\r\n\r\n        if (this.freeScroll) {\r\n            this.initialPositionX = positionX;\r\n        }\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === 'left' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = 0;\r\n            }\r\n            if (isPulled.edge === 'right' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = positionX;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMovePositionX() {\r\n        const distance = this.getDistance();\r\n        return this.initialElementPositionX - distance;\r\n    }\r\n\r\n    getDistance() {\r\n        return this.startX - this.moveX;\r\n    }\r\n\r\n    /* If the container is pulled out of the left or right border */\r\n    detectPulled() {\r\n        const currentPositionX = this.getCurrentPositionX();\r\n\r\n        if (currentPositionX > 0) {\r\n            return {\r\n                edge: 'left',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX)\r\n            }\r\n        }\r\n\r\n        if (currentPositionX < this.getEndPosition()) {\r\n            return {\r\n                edge: 'right',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX - this.getEndPosition())\r\n            }\r\n        }\r\n    }\r\n\r\n    slowdownOnPull(_positionX) {\r\n        let distance = Math.abs(this.getDistance());\r\n        const endPosition = this.getEndPosition();\r\n        const isPulled = this.detectPulled();\r\n        const decelerationRatio = 3 + isPulled.overflowX / 50;\r\n        let positionX;\r\n\r\n        if (isPulled.edge === 'left') {\r\n\r\n            if (this.initialElementPositionX < 0) {\r\n                distance = distance - Math.abs(this.initialElementPositionX);\r\n            }\r\n\r\n            const rubberPositionX = distance / decelerationRatio;\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX > 0) {\r\n                positionX = this.initialElementPositionX + rubberPositionX;\r\n            }\r\n\r\n            if (positionX > this.pullLimit) {\r\n                positionX = this.pullLimit;\r\n            }\r\n        }\r\n\r\n        if (isPulled.edge === 'right') {\r\n            const rubberPositionX = endPosition + (((this.initialElementPositionX - distance) - endPosition) / decelerationRatio);\r\n            const containerWidth = this.getWidth();\r\n\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX < -(containerWidth - this.visibleWidth)) {\r\n                positionX = ((containerWidth - this.visibleWidth) + this.initialElementPositionX) + rubberPositionX;\r\n            }\r\n\r\n            if (positionX < endPosition - this.pullLimit) {\r\n                positionX = endPosition - this.pullLimit;\r\n            }\r\n        }\r\n\r\n        return positionX;\r\n    }\r\n\r\n    finishMoving() {\r\n        const positionX = this.getMovePositionX();\r\n        let newPositionX;\r\n\r\n        if (this.freeScroll) {\r\n            newPositionX = this.getInertia();\r\n        }\r\n\r\n        /* Align container while pulling */\r\n        newPositionX = this.getAlignedPositionOnPull(newPositionX);\r\n\r\n        this.transformPositionX(newPositionX);\r\n        this.setInitialPosition(positionX);\r\n    }\r\n\r\n    /* Returns the new position of the container with inertia */\r\n    getInertia() {\r\n        const distance = this.getDistance();\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.startTime;\r\n        let inertia = (distance / tapLength) * 100;\r\n\r\n        return this.initialPositionX - inertia;\r\n    }\r\n\r\n    getAlignedPositionOnPull(newPositionX) {\r\n        const direction = this.getDirection();\r\n\r\n        if (direction === 'left') {\r\n            let endPosition = this.getEndPosition();\r\n            if (newPositionX < endPosition) {\r\n                return endPosition;\r\n            }\r\n        }\r\n        if (direction === 'right') {\r\n            if (newPositionX > 0) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return newPositionX;\r\n    }\r\n\r\n    getCurrentPositionX() {\r\n        const parentPosition = this.element.parentElement.getBoundingClientRect();\r\n        const position = this.element.getBoundingClientRect();\r\n        return position.left - parentPosition.left;\r\n    }\r\n\r\n    getEndPosition() {\r\n        if (this.isLightDOM) {\r\n            let imagesInContainer = this.cells.imageUtils.getImages();\r\n            return -(imagesInContainer.length * this.fullCellWidth - this.visibleWidth - this.margin);\r\n        } else {\r\n            const width = this.getWidth();\r\n            const visibleWidth = this.element.parentElement.clientWidth;\r\n            return visibleWidth - width;\r\n        }\r\n    }\r\n\r\n    transformPositionX(value, duration = this.transitionDuration) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;\r\n        this.element.style.transform = 'translateX(' + value + 'px)';\r\n    }\r\n\r\n    getWidth() {\r\n        let width = this.cellLengthInLightDOMMode * this.fullCellWidth;\r\n        let totalImageWidth = this.cellLength * this.fullCellWidth;\r\n\r\n        if (totalImageWidth < width) {\r\n            width = totalImageWidth;\r\n        }\r\n\r\n        return this.isLightDOM ? width : totalImageWidth;\r\n    }\r\n\r\n    setWidth() {\r\n        const width = this.getWidth();\r\n        this.element.style.width = width + \"px\";\r\n    }\r\n\r\n    setInitialPosition(position) {\r\n        this.initialPositionX = position;\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getInitialElementPositionX() {\r\n        const carouselElementPosition = this.utils.getCarouselElementPosition()['left'];\r\n        return this.getElementPosition()['left'] - carouselElementPosition;\r\n    }\r\n\r\n    clearInitialValues() {\r\n        this.startX = this.moveX = undefined;\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.startX - this.moveX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class ImageUtils {\r\n    cellStack;\r\n    imageStack;\r\n    element;\r\n\r\n    constructor(element) {\r\n        this.element = element;\r\n    }\r\n\r\n    getImages() {\r\n        return this.cellStack.filter(this.filter);\r\n    }\r\n\r\n    comparePositions(a, b) {\r\n        if (a.positionX < b.positionX) {\r\n            return -1;\r\n        }\r\n        if (a.positionX > b.positionX) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    filter(cell) {\r\n        return cell.img !== undefined;\r\n    }\r\n}\r\n\r\nexport class Cells {\r\n    cells: HTMLCollection;\r\n    element: HTMLElement;\r\n    visibleWidth: number;\r\n    counter: number = 0;\r\n    imageUtils;\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get cellLength() {\r\n        return this.cells.length;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils) {\r\n\r\n        this.imageUtils = new ImageUtils(this.element);\r\n        this.init(carouselProperties);\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    lineUp() {\r\n        const cells = this.element.children;\r\n        this.imageUtils.cellStack = [];\r\n\r\n        for (var i = 0; i < cells.length; i++) {\r\n            let cell = cells[i];\r\n            let positionX = this.getCellPositionInContainer(i);\r\n            (cell as HTMLElement).style.transform = 'translateX(' + positionX + 'px)';\r\n            (cell as HTMLElement).style.width = this.carouselProperties.cellWidth + 'px';\r\n\r\n            if (this.getImage(i)) {\r\n                this.imageUtils.cellStack.push({\r\n                    index: i,\r\n                    positionX,\r\n                    img: this.getImage(i)['image']\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    ifSequenceOfCellsIsChanged() {\r\n        const cells = this.element.children;\r\n        return cells[0]['style'].transform !== 'translateX(0px)';\r\n    }\r\n\r\n    getCellPositionInContainer(cellIndexInDOMTree) {\r\n        let positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        return positionIndex * this.fullCellWidth;\r\n    }\r\n\r\n    getCellIndexInContainer(cellIndexInDOMTree) {\r\n        let positionIndex;\r\n\r\n        if (!this.isLightDOM) {\r\n            return cellIndexInDOMTree;\r\n        }\r\n\r\n        let cellLength = this.cellLengthInLightDOMMode;\r\n        let counter = this.counter - this.overflowCellsLimit;\r\n\r\n        if (counter > cellLength) {\r\n            counter = counter % cellLength;\r\n        }\r\n\r\n        if (counter < 0) {\r\n            return cellIndexInDOMTree;\r\n        } else {\r\n            positionIndex = cellIndexInDOMTree - counter;\r\n            if (positionIndex < 0) {\r\n                positionIndex = cellLength + positionIndex;\r\n            }\r\n        }\r\n\r\n        return positionIndex;\r\n    }\r\n\r\n    getImage(cellIndex) {\r\n        if (!this.images) {\r\n            return;\r\n        }\r\n\r\n        let imageIndex = this.getImageIndex(cellIndex);\r\n        let file = this.images[imageIndex];\r\n\r\n        if (file && !file.type) {\r\n            file.type = 'image';\r\n        }\r\n\r\n        return {\r\n            image: this.images[imageIndex],\r\n            imageIndex\r\n        };\r\n    }\r\n\r\n    getImageIndex(cellIndexInDOMTree: number) {\r\n        const positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        let imageIndex;\r\n\r\n        if (this.counter > this.overflowCellsLimit) {\r\n            let cellLimitOverflow = this.counter - this.overflowCellsLimit;\r\n            imageIndex = positionIndex + cellLimitOverflow;\r\n\r\n            if (this.images && this.carouselProperties.loop) {\r\n                imageIndex = imageIndex % this.images.length;\r\n            }\r\n        } else {\r\n            imageIndex = cellIndexInDOMTree;\r\n        }\r\n\r\n        return imageIndex;\r\n    }\r\n\r\n    setCounter(value: number) {\r\n        this.counter = value;\r\n    }\r\n\r\n    init(carouselProperties: CarouselProperties) {\r\n        this.element = this.carouselProperties.cellsElement;\r\n        this.cells = this.element.children;\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.element.parentElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport interface Properties {\r\n    carouselProperties: CarouselProperties;\r\n}\r\n\r\nexport class Slide {\r\n    slideLength: number;\r\n    isSlideInProgress: boolean;\r\n    direction: 'left' | 'right';\r\n    counter: number = 0;\r\n    _counter: number = 0;\r\n    distance;\r\n    distanceAbs;\r\n    visibleWidth: number;\r\n    isNotClickOnArrow: boolean;\r\n    initialPositionX: number = 0;\r\n    currentPositionX: number = 0;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.carouselProperties.minSwipeDistance;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return this.utils.visibleCellsOverflowContainer;\r\n    }\r\n\r\n    /* The position to which the container returns after each slide \r\n     * in the light DUM tree mode. \r\n     */\r\n    get fixedContainerPosition() {\r\n        return -(this.overflowCellsLimit * this.fullCellWidth);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    /* Number of cell elements in the DUM tree */\r\n    get cellLength() {\r\n        if (this.isLightDOM) {\r\n            return this.cells.cellLengthInLightDOMMode;\r\n        } else {\r\n            if (this.images) {\r\n                return this.images.length;\r\n            } else {\r\n                return this.cells.cellLength;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells,\r\n        private container) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n        this.setVisibleWidth();\r\n    }\r\n\r\n    init() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n\r\n    handleTouchstart(event) {\r\n        /* Touchstart event is not called for arrow */\r\n        this.isNotClickOnArrow = true;\r\n        this.isSlideLengthLimited = undefined;\r\n\r\n        if (!this.isSlideInProgress) {\r\n            this.initialPositionX = this.container.getCurrentPositionX();\r\n        }\r\n    }\r\n\r\n    handleTouchend(event) {\r\n        if (!this.isNotClickOnArrow) {\r\n            return;\r\n        }\r\n        this.currentPositionX = this.container.getCurrentPositionX();\r\n        this.distanceAbs = Math.abs(this.initialPositionX - this.currentPositionX);\r\n        this.distance = this.initialPositionX - this.currentPositionX;\r\n        this.direction = this.getDirection();\r\n        this.isNotClickOnArrow = undefined;\r\n        this.handleSlide();\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.setCounter();\r\n        this.isSlideInProgress = false;\r\n\r\n        if (this.isLightDOM) {\r\n            this.alignContainerFast();\r\n        }\r\n    }\r\n\r\n    detectClickOnArrow(event) {\r\n        return event.target.classList.contains(\"carousel-arrow\");\r\n    }\r\n\r\n    handleSlide(customSlideLength: number = undefined) {\r\n        let isUsingButton = customSlideLength;\r\n        let newPositionX;\r\n\r\n        if (isUsingButton && this.isSlideInProgress || !this.direction) {\r\n            return;\r\n        }\r\n\r\n        /* Custom slide length is used in arrows */\r\n        if (customSlideLength) {\r\n            this.slideLength = this.limitSlideLength(customSlideLength);\r\n\r\n            if (!this.isSlideInProgress) {\r\n                this.initialPositionX = this.container.getCurrentPositionX();\r\n            }\r\n        } else {\r\n            this.slideLength = this.getSlideLength(this.distanceAbs);\r\n        }\r\n\r\n        /* Store intermediate counter value */\r\n        this._counter = this.getPreliminaryCounter();\r\n\r\n        if (this.direction === 'left') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.limitSlideLength(this.getSlideLength(this.distanceAbs));\r\n            }\r\n\r\n            this._counter = this.getPreliminaryCounter();\r\n            let isSlidesEnd = this.isSlidesEnd(this._counter);\r\n            newPositionX = this.getPositionByIndex(this._counter);\r\n\r\n            if (isSlidesEnd) {\r\n                this._counter = this.counter;\r\n\r\n                newPositionX = this.getPositionByIndex(this.counter);\r\n                this.slideLength = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.getSlideLength(this.distanceAbs);\r\n            }\r\n\r\n            if (this._counter < 0) {\r\n                this._counter = this.counter;\r\n                this.slideLength = this.counter;\r\n            }\r\n\r\n            newPositionX = this.getPositionByIndex(this.counter - this.slideLength);\r\n        }\r\n\r\n        if (this.container.getCurrentPositionX() !== newPositionX) {\r\n            this.isSlideInProgress = true;\r\n            this.container.transformPositionX(newPositionX);\r\n        }\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        this.direction = 'left';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.direction = 'right';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    select(index: number) {\r\n        if (index > this.cellLength - 1) {\r\n            return;\r\n        }\r\n\r\n        if (index > this.counter) {\r\n            let length = index - this.counter;\r\n            this.next(length);\r\n        }\r\n\r\n        if (index < this.counter) {\r\n            let length = this.counter - index;\r\n            this.prev(length);\r\n        }\r\n    }\r\n\r\n    getPreliminaryCounter() {\r\n        if (this.direction === 'left') {\r\n            return this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            return this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    /*  \r\n     * Limits the length of the slide during calls to the next() and prev() \r\n     * methods if the specified position is outside the cell length \r\n     */\r\n    limitSlideLength(slideLength: number) {\r\n        if (slideLength > 1) {\r\n            for (var i = 0; i < slideLength; i++) {\r\n                let newCounter = this.counter + (slideLength - i);\r\n\r\n                if (!this.isSlidesEnd(newCounter)) {\r\n                    slideLength = slideLength - i;\r\n                    this.isSlideLengthLimited = i > 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return slideLength;\r\n    }\r\n\r\n    /* Offset the container to show the last cell completely */\r\n    getPositionCorrection(counter) {\r\n        let correction = 0;\r\n        let isLastSlide = this.isLastSlide(counter);\r\n\r\n        if (this.carouselProperties.loop || this.direction === \"right\") {\r\n            return 0;\r\n        }\r\n\r\n        if (this.isSlideLengthLimited || isLastSlide) {\r\n            let cellsWidth = this.cells.cellLengthInLightDOMMode * this.fullCellWidth;\r\n\r\n            if (this.visibleWidth < cellsWidth) {\r\n                correction = -(this.numberOfVisibleCells * this.fullCellWidth - this.visibleWidth - this.margin);\r\n            }\r\n\r\n            if (correction >= -this.margin) {\r\n                correction = 0;\r\n            }\r\n        }\r\n\r\n        return correction;\r\n    }\r\n\r\n    getSlideLength(distanceAbs) {\r\n        let isLastSlide = this.isLastSlide(this.counter);\r\n\r\n        /* If the last cell does not fit entirely, then the \r\n         * length of the swipe to the left, from the extreme \r\n         * right position, may be shorter than usual. \r\n         */\r\n        if (isLastSlide && this.direction === \"right\") {\r\n            distanceAbs = distanceAbs + this.visibleWidth % this.fullCellWidth;\r\n        }\r\n\r\n        let length = Math.floor(distanceAbs / this.fullCellWidth);\r\n\r\n        if (distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {\r\n            length++;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    getDistanceAbs() {\r\n        return Math.abs(this.initialPositionX - this.currentPositionX);\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.initialPositionX - this.currentPositionX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n\r\n    isSlidesEnd(counter: number) {\r\n        let margin = this.visibleCellsOverflowContainer ? 1 : 0;\r\n        let imageLength = this.images ? this.images.length : this.cells.cellLength;\r\n\r\n        if (this.carouselProperties.loop) {\r\n            return false;\r\n        } else {\r\n            return (imageLength - counter + margin) < this.numberOfVisibleCells;\r\n        }\r\n    }\r\n\r\n    isLastSlide(counter: number) {\r\n        return this.isSlidesEnd(counter + 1)\r\n    }\r\n\r\n    setCounter() {\r\n        if (this.direction === 'left') {\r\n            this.counter = this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.counter = this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    getPositionByIndex(_counter) {\r\n        let correction = this.getPositionCorrection(this.counter + this.slideLength);\r\n        let position;\r\n\r\n        if (correction !== 0) {\r\n            correction = correction + this.fullCellWidth\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            correction = 0;\r\n        }\r\n\r\n        if (this.isLightDOM && this.isLightDOMMode(_counter) ||\r\n            this.isLightDOM && this.ifLeftDOMModeAtEnd(_counter)) {\r\n\r\n            let initialPosition = this.getPositionWithoutCorrection(this.initialPositionX);\r\n            let counterDifference = _counter - this.counter;\r\n            position = initialPosition - ((counterDifference * this.fullCellWidth) - correction);\r\n        } else {\r\n            position = -((_counter * this.fullCellWidth) - correction);\r\n        }\r\n\r\n        position = this.provideSafePosition(position);\r\n\r\n        return position;\r\n    }\r\n\r\n    provideSafePosition(position) {\r\n        const endPosition = this.container.getEndPosition();\r\n\r\n        if (this.direction === 'left') {\r\n            if (position > 0) {\r\n                position = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (position < endPosition) {\r\n                position = endPosition;\r\n            }\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    getPositionWithoutCorrection(value) {\r\n        let remainder = value % this.fullCellWidth;\r\n\r\n        if (remainder !== 0) {\r\n            return value - (this.fullCellWidth + remainder);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        return this.isLastSlide(this.counter) || \r\n        (!this.visibleCellsOverflowContainer && this.cellLength <= this.numberOfVisibleCells) ||\r\n        (this.visibleCellsOverflowContainer && this.cellLength < this.numberOfVisibleCells)\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        return this.counter === 0;\r\n    }\r\n\r\n    alignContainerFast() {\r\n        if (this.isLightDOMMode(this.counter)) {\r\n            let positionX = this.fixedContainerPosition;\r\n            this.container.transformPositionX(positionX, 0);\r\n\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        } else if (this.ifLeftDOMModeToBeginning(this.counter)) {\r\n            /* If we have already exited the light DOM mode but \r\n             * the cells are still out of place \r\n             */\r\n            if (this.cells.ifSequenceOfCellsIsChanged()) {\r\n                let positionX = -(this.counter * this.fullCellWidth);\r\n                this.container.transformPositionX(positionX, 0);\r\n\r\n                this.cells.setCounter(this.counter);\r\n                this.cells.lineUp();\r\n            }\r\n        } else if (this.ifLeftDOMModeAtEnd(this.counter)) {\r\n            let containerPositionX = this.container.getCurrentPositionX();\r\n            let containerWidth = this.container.getWidth();\r\n            this.visibleWidth;\r\n\r\n            if (this.isLastSlide(this.counter) &&\r\n                containerWidth + containerPositionX >= this.visibleWidth) {\r\n                return;\r\n            }\r\n\r\n            let correction = this.getPositionCorrection(this.counter);\r\n\r\n            if (correction !== 0) {\r\n                correction = correction + this.fullCellWidth\r\n            }\r\n\r\n            if (this.direction === 'right') {\r\n                correction = 0;\r\n            }\r\n\r\n            let positionX = this.fixedContainerPosition + correction;\r\n\r\n            this.container.transformPositionX(positionX, 0);\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        }\r\n    }\r\n\r\n    isLightDOMMode(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (!this.isLightDOM) {\r\n            return false;\r\n        }\r\n\r\n        if (counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            this.counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            this.counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeAtEnd(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeToBeginning(counter) {\r\n        let flag;\r\n\r\n        if (counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    setVisibleWidth() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Utils {\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            let overflowCellsLimit = Math.floor((this.images.length - this.numberOfVisibleCells) / 2);\r\n\r\n            if (overflowCellsLimit < 0) {\r\n                overflowCellsLimit = 0;\r\n            }\r\n            \r\n            return overflowCellsLimit;\r\n        } else {\r\n            return this.carouselProperties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.carouselProperties.overflowCellsLimit * 2 + this.numberOfVisibleCells > this.images.length;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return (this.numberOfVisibleCells * this.fullCellWidth - this.margin) > this.visibleWidth;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get visibleWidth() {\r\n        return this.carouselProperties.visibleWidth || this.carouselProperties.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties) {\r\n\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    getStartX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPosition = this.getCarouselElementPosition()['left'];\r\n        let startX;\r\n\r\n        if (touches) {\r\n            startX = touches[0].clientX - carouselElementPosition;\r\n        } else {\r\n            startX = event.clientX - carouselElementPosition;\r\n        }\r\n\r\n        return startX;\r\n    }\r\n\r\n    getMoveX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPositionX = this.getCarouselElementPosition()['left'];\r\n\r\n        if (touches) {\r\n            return touches[0].clientX - carouselElementPositionX;\r\n        } else {\r\n            return event.clientX - carouselElementPositionX;\r\n        }\r\n    }\r\n\r\n    getCarouselElementPosition() {\r\n        return this.carouselProperties.hostElement.getBoundingClientRect();\r\n    }\r\n}","import {ChangeDetectorRef, Component, ElementRef, ViewChild, EventEmitter, HostBinding, HostListener, Input, Output, OnDestroy, SimpleChanges} from '@angular/core';\r\n\r\nimport {Images} from './interfaces';\r\nimport {Touches} from './touches';\r\nimport {Carousel} from './carousel';\r\nimport {Container} from './container';\r\nimport {Cells} from './cells';\r\nimport {Slide} from './slide';\r\nimport {Utils} from './utils';\r\nimport {Properties as CarouselProperties} from './interfaces';\r\n\r\n\r\n@Component({\r\n    selector: 'carousel, [carousel]',\r\n    templateUrl: './carousel.component.html',\r\n    styleUrls: ['./carousel.component.sass']\r\n})\r\n\r\nexport class CarouselComponent implements OnDestroy {\r\n    carousel;\r\n    container;\r\n    utils;\r\n    cells;\r\n    slide;\r\n    _id: string;\r\n    _images: Images;\r\n    touches: any;\r\n    landscapeMode: any;\r\n    minTimeout = 30;\r\n    isVideoPlaying: boolean;\r\n    _isCounter: boolean;\r\n    _width: number;\r\n    _cellWidth: number | '100%' = 200;\r\n    _loop: boolean = false;\r\n    _lightDOM: boolean = false;\r\n    isMoving: boolean;\r\n    isNgContent: boolean;\r\n    cellLength: number;\r\n    dotsArr: any;\r\n    carouselProperties: CarouselProperties;\r\n    savedCarouselWidth: number;\r\n\r\n    get isContainerLocked() {\r\n        if (this.carousel) {\r\n            return this.carousel.isContainerLocked;\r\n        }\r\n    }\r\n\r\n    get slideCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.slideCounter;\r\n        }\r\n    }\r\n\r\n    get lapCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.lapCounter;\r\n        }\r\n    }\r\n\r\n    get isLandscape() {\r\n        return window.innerWidth > window.innerHeight;\r\n    }\r\n\r\n    get isSafari(): any {\r\n        const ua = navigator.userAgent.toLowerCase();\r\n        if (ua.indexOf('safari') !== -1) {\r\n            return !(ua.indexOf('chrome') > -1);\r\n        }\r\n    }\r\n\r\n    get counter() {\r\n        let counter;\r\n\r\n        if (this.loop) {\r\n            counter = this.slideCounter % this.cellLength;\r\n        } else {\r\n            counter = this.slideCounter;\r\n        }\r\n\r\n        return counter + 1 + this.counterSeparator + this.cellLength;\r\n    }\r\n\r\n    get cellsElement() {\r\n        return this.elementRef.nativeElement.querySelector('.carousel-cells');\r\n    }\r\n\r\n    get isArrows() {\r\n        return this.arrows && !this.freeScroll;\r\n    }\r\n\r\n    get isCounter() {\r\n        return this._isCounter && this.cellLength > 1;\r\n    }\r\n\r\n    get activeDotIndex() {\r\n        return this.slideCounter % this.cellLength;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.carousel) {\r\n            return this.carousel.cellLimit;\r\n        }\r\n    }\r\n\r\n    get carouselWidth() {\r\n        return this.elementRef.nativeElement.clientWidth;\r\n    }\r\n\r\n    @Output() events: EventEmitter < any > = new EventEmitter < any > ();\r\n\r\n    @Input() id: number;\r\n    @Input() height: number = 200;\r\n    @Input() width: number;\r\n    @Input() autoplay: boolean = false;\r\n    @Input() autoplayInterval: number = 5000;\r\n    @Input() pauseOnHover: boolean = true;\r\n    @Input() dots: boolean = false;\r\n    @Input() borderRadius: number;\r\n    @Input() margin: number = 10;\r\n    @Input() objectFit: 'contain' | 'cover' | 'none' = 'cover';\r\n    @Input() minSwipeDistance: number = 10;\r\n    @Input() transitionDuration: number = 200;\r\n    @Input() transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' = 'ease-out';\r\n    @Input() videoProperties: any;\r\n    @Input() counterSeparator: string = \" / \";\r\n    @Input() overflowCellsLimit: number = 3;\r\n    @Input() listeners: 'auto' | 'mouse and touch' = 'mouse and touch';\r\n    @Input() cellsToShow: number;\r\n    @Input() cellsToScroll: number = 1;\r\n    @Input() freeScroll: boolean = false;\r\n    @Input() arrows: boolean = true;\r\n    @Input() arrowsOutside: boolean;\r\n    @Input() arrowsTheme: 'light' | 'dark' = 'light';\r\n\r\n    @Input()\r\n    set images(images: Images & any) {\r\n        this._images = images;\r\n    }\r\n    get images() {\r\n        return this._images;\r\n    }\r\n\r\n    @Input('cellWidth') set cellWidth(value: number | '100%') {\r\n        if (value) {\r\n            this._cellWidth = value;\r\n        }\r\n    }\r\n\r\n    @Input('counter') set isCounter(value: boolean) {\r\n        if (value) {\r\n            this._isCounter = value;\r\n        }\r\n    }\r\n\r\n    @Input('loop') set loop(value: boolean) {\r\n        if (value) {\r\n            this._loop = value;\r\n        }\r\n    }\r\n\r\n    get loop() {\r\n        return this._loop;\r\n    }\r\n\r\n    @Input('lightDOM') set lightDOM(value: boolean) {\r\n        if (value) {\r\n            this._lightDOM = value;\r\n        }\r\n    }\r\n\r\n    get lightDOM() {\r\n        if (this.images) {\r\n            return this._lightDOM;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @HostBinding('class.carousel') hostClassCarousel: boolean = true;\r\n    @HostBinding('style.height') hostStyleHeight: string;\r\n    @HostBinding('style.width') hostStyleWidth: string;\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onWindowResize(event: any) {\r\n        if (this.utils.visibleWidth !== this.savedCarouselWidth) {\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    @HostListener('mousemove', ['$event'])\r\n    onMousemove(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.stopAutoplay();\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseleave', ['$event'])\r\n    onMouseleave(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private ref: ChangeDetectorRef) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isNgContent = this.cellsElement.children.length > 0;\r\n\r\n        this.touches = new Touches({\r\n            element: this.cellsElement,\r\n            listeners: this.listeners,\r\n            mouseListeners: {\r\n                \"mousedown\": \"handleMousedown\",\r\n                \"mouseup\": \"handleMouseup\"\r\n            }\r\n        });\r\n\r\n        this.touches.on('touchstart', this.handleTouchstart);\r\n        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);\r\n        this.touches.on('touchend', this.handleTouchend);\r\n        this.touches.on('mousedown', this.handleTouchstart);\r\n        this.touches.on('mouseup', this.handleTouchend);\r\n        this.touches.on('tap', this.handleTap);\r\n\r\n        this.setDimensions();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initCarousel();\r\n\r\n        if (this.autoplay) {\r\n            this.carousel.autoplay();\r\n        }\r\n\r\n        this.cellLength = this.getCellLength();\r\n        this.dotsArr = Array(this.cellLength).fill(1);\r\n        this.ref.detectChanges();\r\n        this.carousel.lineUpCells();\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        /* Start detecting changes in the DOM tree */\r\n        this.detectDomChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.width || changes.height || changes.images) {\r\n            this.setDimensions();\r\n            this.initCarousel();\r\n            this.carousel.lineUpCells();\r\n            this.ref.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.touches.destroy();\r\n        //this.carousel.destroy();\r\n    }\r\n\r\n    initCarousel() {\r\n        this.carouselProperties = {\r\n            id: this.id,\r\n            cellsElement: this.elementRef.nativeElement.querySelector('.carousel-cells'),\r\n            hostElement: this.elementRef.nativeElement,\r\n            images: this.images,\r\n            cellWidth: this.getCellWidth(),\r\n            loop: this.loop,\r\n            autoplayInterval: this.autoplayInterval,\r\n            overflowCellsLimit: this.overflowCellsLimit,\r\n            visibleWidth: this.width,\r\n            margin: this.margin,\r\n            minSwipeDistance: this.minSwipeDistance,\r\n            transitionDuration: this.transitionDuration,\r\n            transitionTimingFunction: this.transitionTimingFunction,\r\n            videoProperties: this.videoProperties,\r\n            eventHandler: this.events,\r\n            freeScroll: this.freeScroll,\r\n            lightDOM: this.lightDOM\r\n        };\r\n\r\n        this.utils = new Utils(this.carouselProperties);\r\n        this.cells = new Cells(this.carouselProperties, this.utils);\r\n        this.container = new Container(this.carouselProperties, this.utils, this.cells);\r\n        this.slide = new Slide(this.carouselProperties, this.utils, this.cells, this.container);\r\n        this.carousel = new Carousel(this.carouselProperties, this.utils, this.cells, this.container, this.slide);\r\n    \r\n        if (this.autoplay) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        this.landscapeMode = this.isLandscape;\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        this.carouselProperties.cellWidth = this.getCellWidth();\r\n        this.cells.updateProperties(this.carouselProperties);\r\n        this.carousel.updateProperties(this.carouselProperties);\r\n        this.container.updateProperties(this.carouselProperties);\r\n        this.slide.updateProperties(this.carouselProperties);\r\n        this.utils.updateProperties(this.carouselProperties);\r\n        this.carousel.lineUpCells();\r\n        this.slide.select(0);\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    detectDomChanges() {\r\n        const observer = new MutationObserver((mutations) => {\r\n            this.onDomChanges();\r\n        });\r\n\r\n        var config = {\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true\r\n        };\r\n        observer.observe(this.cellsElement, config);\r\n    }\r\n\r\n    onDomChanges() {\r\n        this.cellLength = this.getCellLength();\r\n        this.carousel.lineUpCells();\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    setDimensions() {\r\n        this.hostStyleHeight = this.height + 'px';\r\n        this.hostStyleWidth = this.width + 'px';\r\n    }\r\n\r\n    getImage(index) {\r\n        return this.carousel.getImage(index);\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        //event.preventDefault();\r\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.carousel.handleTouchstart(event);\r\n        this.isMoving = true;\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        event.preventDefault();\r\n        this.carousel.handleHorizontalSwipe(event);\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n        this.carousel.handleTouchend(event);\r\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.isMoving = false;\r\n    }\r\n\r\n    handleTap = (event: any) => {\r\n        let outboundEvent: any = {\r\n            name: 'click'\r\n        }\r\n        let nodes = Array.prototype.slice.call(this.cellsElement.children);\r\n        let cellElement = event.srcElement.closest(\".carousel-cell\");\r\n        const i = nodes.indexOf(cellElement);\r\n        const cellIndex = nodes.indexOf(cellElement);\r\n\r\n        if (this.images) {\r\n            //outboundEvent.fileIndex = this.carousel.getFileIndex(i);\r\n            //outboundEvent.file = this.carousel.getFile(cellIndex);\r\n        } else {\r\n            outboundEvent.cellIndex = cellIndex;\r\n        }\r\n    }\r\n\r\n    handleTransitionendCellContainer(event) {\r\n        this.carousel.handleTransitionend();\r\n    }\r\n\r\n    toggleVideo(video) {\r\n        event.preventDefault();\r\n        if (this.videoProperties.noPlay) {\r\n            return;\r\n        }\r\n\r\n        if (video.paused) {\r\n            video.play();\r\n            this.isVideoPlaying = true;\r\n        } else {\r\n            video.pause();\r\n            this.isVideoPlaying = false;\r\n        }\r\n\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    getCellWidth() {\r\n        let elementWidth = this.carouselWidth;\r\n\r\n        if (this.cellsToShow) {\r\n            let margin = this.cellsToShow > 1 ? this.margin : 0;\r\n            let totalMargin = margin * (this.cellsToShow - 1);\r\n            return (elementWidth - totalMargin) / this.cellsToShow;\r\n        }\r\n\r\n        if (this._cellWidth === '100%') {\r\n            return elementWidth;\r\n        } else {\r\n            return this._cellWidth;\r\n        }\r\n    }\r\n\r\n    next() {\r\n        this.carousel.next(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    prev() {\r\n        this.carousel.prev(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isNextArrowDisabled();\r\n        }\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isPrevArrowDisabled();\r\n        }\r\n    }\r\n\r\n    getCellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cellsElement.children.length;\r\n        }\r\n    }\r\n}","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CarouselComponent} from './carousel.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CarouselComponent\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        CarouselComponent\r\n    ],\r\n    providers: [\r\n\r\n    ],\r\n    bootstrap: [\r\n        \r\n    ],\r\n    entryComponents: [\r\n        CarouselComponent\r\n    ]\r\n})\r\nexport class IvyCarouselModule { }\r\n"]}